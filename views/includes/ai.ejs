<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ChatBot</title>
    <!-- <link rel="stylesheet" href="style.css" /> -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      rel="preload"
      href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght@400;500;600;700&display=swap"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript>
      <link
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:wght@400;500;600;700&display=swap"
        rel="stylesheet"
      />
    </noscript>
  </head>
  <style>
    @import url("https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Plus+Jakarta+Sans:wght@600&display=swap");
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;

      font-family: "Inter", serif;
    }

    body {
      min-height: 100vh;
    }

    #chatbot-toggler {
      position: fixed;
      bottom: 30px;
      right: 35px;
      border: none;
      height: 50px;
      width: 50px;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      border-radius: 50%;
      background: #ec3c41;
      transition: all 0.2s ease;
    }

    body.show-chatbot #chatbot-toggler {
      transform: rotate(90deg);
    }

    #chatbot-toggler span {
      color: #fff;
      position: absolute;
    }
    body.show-chatbot #chatbot-toggler span:first-child,
    #chatbot-toggler span:last-child {
      opacity: 0;
    }

    body.show-chatbot #chatbot-toggler span:last-child {
      opacity: 0;
    }

    /* Ensure the chatbot is hidden by default */
    .chatbot-popup {
      display: none;
      position: fixed;
      right: 35px;
      bottom: 90px;
      width: 420px;
      background: #fff;

      border-radius: 10px;
      overflow: hidden;
      height: 400px;
      opacity: 0;
      transform: scale(0.2);
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1),
        0 32px 64px -48px rgba(0, 0, 0, 0.5);
      transition: all 0.1s ease;
      z-index: 9999;
    }

    body.show-chatbot .chatbot-popup {
      display: block;
      opacity: 1;
      pointer-events: auto;
      transform: scale(1);
    }

    .chat-header {
      display: flex;
      align-items: center;
      background: #ec3c41;
      padding: 1rem 0.6rem;
      justify-content: space-between;
    }

    .chat-header .header-info {
      display: flex;
      gap: 10px;
      align-items: center;
    }

    .header-info .chatbot-logo {
      height: 35px;
      width: 35px;
      padding: 0.4rem;
      fill: #ec3c41;
      flex-shrink: 0;
      background: #fff;
      border-radius: 50%;
    }

    .header-info .logo-text {
      color: #fff;
      font-size: 1.31rem;
      font-weight: 600;
    }

    .chat-header #close-chatbot {
      border: none;
      color: #fff;
      height: 40px;
      width: 40px;
      font-size: 1.9rem;
      margin-right: -10px;
      padding-top: 2px;
      cursor: pointer;
      border-radius: 50%;
      background: none;
      transition: 0.2s ease;
    }

    .chat-header #close-chatbot:hover {
      background: #ec3c41;
    }

    .chat-body {
      padding: 0.8rem 0.65rem;
      display: flex;
      gap: 0.7rem;
      height: 460px;
      margin-bottom: 5.1rem;
      overflow-y: auto;
      flex-direction: column;
      scrollbar-width: thin;
      scrollbar-color: #ccccf5 transparent;
    }
    .chat-body .message {
      display: flex;
      gap: 11px;
      align-items: center;
    }

    .chat-body .bot-message .bot-avatar {
      height: 2.18rem;
      width: 2.18rem;
      padding: 0.3rem;
      fill: #ec3c41;
      flex-shrink: 0;
      margin-bottom: 2px;
      align-self: flex-end;
      background: #fff;
      border-radius: 50%;
    }

    .chat-body .user-message {
      flex-direction: column;
      align-items: flex-end;
      font-size: 0.95rem;
    }

    .chat-body .bot-message .message-text {
      background: #f2f2ff;
      border-radius: 0.8rem 0.8rem 0.8rem 0.18rem;
    }

    .chat-body .bot-message .thinking .message-text {
      padding: 2px 16px;
    }

    .chat-body .user-message .message-text {
      color: #fff;
      background: #ec3c41 !important;
      border-radius: 0.8rem 0.8rem 0.18rem 0.8rem;
    }

    .chat-body .user-message .attachments {
      width: 50%;
      margin-top: -7px;
      border-radius: 0.8rem 0.18rem 0.8rem 0.8rem;
    }

    .chat-body .message .message-text {
      padding: 12px 16px;
      max-width: 75%;
      background: #f2f2ff;
    }

    .chat-body .bot-message .thinking-indicator {
      display: flex;
      flex-direction: row;
      gap: 4px;
      padding-block: 0.9rem;
    }

    .chat-body .bot-message .thinking-indicator .dot {
      height: 7px;
      width: 7px;
      opacity: 0.7;
      border-radius: 50%;
      background: #ec3c41;
      animation: dotpulse 1.8s ease-in-out infinite;
    }

    .chat-body .bot-message .thinking-indicator .dot:nth-child(1) {
      animation-delay: 0.2s;
    }
    .chat-body .bot-message .thinking-indicator .dot:nth-child(2) {
      animation-delay: 0.3s;
    }
    .chat-body .bot-message .thinking-indicator .dot:nth-child(3) {
      animation-delay: 0.4s;
    }

    @keyframes dotpulse {
      0%,
      44% {
        transform: translateY(0);
      }
      28% {
        opacity: 0.4;
        transform: translateY(-4px);
      }
      44% {
        opacity: 0.2;
      }
    }

    .chat-footer {
      position: absolute;
      bottom: 0;
      width: 100%;
      background: #fff;
      padding: 0.935rem 1.3rem 1.2rem;
    }

    .chat-footer .chat-form {
      display: flex;
      position: relative;
      align-items: center;
      background: #fff;
      border-radius: 2rem;
      outline: 1px solid #cccce5;
    }

    .chat-footer .chat-form:focus-within {
      outline: 2px solid #ec3c41;
    }

    .chat-form .message-input {
      border: none;
      outline: none;
      height: 2.9rem;
      width: 100%;
      font-size: 0.95rem;
      padding: 14px 0 13px 18px;
      border-radius: inherit;
    }

    .chat-form .chat-controls {
      display: flex;
      height: 2.93rem;
      gap: 3px;
      align-items: center;
      align-self: flex-end;
      padding-right: 0.3rem;
    }

    .chat-form .chat-controls button {
      height: 2.18rem;
      width: 2.18rem;
      border: none;
      font-size: 1.15rem;
      cursor: pointer;
      color: #706d80;
      background: none;
      border-radius: 50%;
      transition: 0.2s ease;
    }

    .chat-form .chat-controls #send-message {
      color: #fff;
      display: none;
      background: #ec3c41;
    }

    .chat-form .message-input:valid ~ .chat-controls #send-message {
      display: block;
    }

    .chat-form .chat-controls #send-message:hover {
      background: #3d39ac;
    }

    .chat-form .chat-controls button:hover {
      background: #f2f2ff;
    }

    .chat-form .file-upload-wrapper {
      height: 2.18rem;
      width: 2.18rem;
      position: relative;
    }

    .chat-form .file-upload-wrapper img {
      position: absolute;
      display: none;
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 50%;
    }

    .chat-form .file-upload-wrapper.file-uploaded img,
    .chat-form .file-upload-wrapper.file-uploaded:hover #file-cancel {
      display: block;
    }

    em-emoji-picker {
      position: absolute;
      left: 50%;
      top: -21.06rem;
      width: 100%;
      visibility: hidden;
      max-width: 21.875rem;
      max-height: 20.625rem;

      transform: translate(-50%);
    }

    body.show-emoji-picker em-emoji-picker {
      visibility: visible;
    }
  </style>

  <body>
    <button id="chatbot-toggler">
      <span class="material-symbols-rounded">mode_comment</span>
      <span class="material-symbols-rounded">close</span>
    </button>

    <div class="chatbot-popup">
      <div class="chat-header">
        <div class="header-info">
          <i class="fa-solid fa-robot chatbot-logo"></i>
          <h2 class="logo-text">ChatBot</h2>
        </div>
        <button
          id="close-chatbot"
          style="font-size: 1.3rem"
          class="fa-solid fa-angle-down"
        ></button>
      </div>

      <div class="chat-body">
        <div class="message bot-message">
          <i class="box-avatar fa-solid fa-robot"></i>
          <div class="message-text">
            Hey there <br />
            How can I help you today?
          </div>
        </div>
        <!-- <div class="message user-message">
          <div class="message-text">
            Lorem ipsum dolor sit amet consectetur adipisicing elit. Animi
            repellendus quia sed!
          </div>
        </div>
        <div class="message bot-message thinking">
          <i class="box-avatar fa-solid fa-robot"></i>
          <div class="message-text">
            <div class="thinking-indicator">
              <div class="dot"></div>
              <div class="dot"></div>
              <div class="dot"></div>
            </div>
          </div>
        </div> -->
        <!-- Chat-footer -->
        <div class="chat-footer">
          <form action="#" class="chat-form">
            <textarea
              placeholder="Message...."
              class="message-input"
              required
            ></textarea>
            <div class="chat-controls">
              <button
                type="button"
                id="emoji-picker"
                class="material-symbols-rounded"
              >
                sentiment_satisfied
              </button>
              <div class="file-upload-wrapper">
                <input type="file" accept="images/*" id="file_input" hidden />
                <img src="#" />
                <button
                  type="button"
                  id="file_upload"
                  class="material-symbols-rounded"
                >
                  attach_file
                </button>
              </div>

              <button
                type="submit"
                id="send-message"
                class="material-symbols-rounded"
              >
                arrow_upward
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/emoji-mart@latest/dist/browser.js"></script>

    <!-- <script src="script.js"></script> -->
    <script>
      const messageInput = document.querySelector(".message-input");
      const chatBody = document.querySelector(".chat-body");
      const sendMessageButton = document.querySelector("#send-message");
      const fileInput = document.querySelector("#file_input");
      const fileUploadWrapper = document.querySelector(".file-upload-wrapper");
      const chatbotToggler = document.querySelector("#chatbot-toggler");
      const closeChatbot = document.querySelector("#close-chatbot");

      const API_KEY = "AIzaSyCfEuz3CJjb6uHueAyPofN3_gap7drW0tE";
      const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;

      const userData = {
        message: null,
        file: {
          data: null,
          mime_type: null,
        },
      };

      const chatHistory = [];

      const createMessageElement = (content, ...classes) => {
        const div = document.createElement("div");
        div.classList.add("message", ...classes);
        div.innerHTML = content;
        return div;
      };

      const generateBotResponse = async (incomingMsgDiv) => {
        const messageElement = incomingMsgDiv.querySelector(".message-text");
        chatHistory.push({
          role: "user",
          parts: [
            { text: userData.message },
            ...(userData.file.data ? [{ inline_data: userData.file }] : []),
          ],
        });
        const requestOptions = {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            contents: chatHistory,
          }),
        };
        try {
          const response = await fetch(API_URL, requestOptions);
          const data = await response.json();
          if (!response.ok) throw new Error(data.error.message);
          const apiResponseText = data.candidates[0].content.parts[0].text
            .replace(/\*\*(.*?)\*\*/g, "$1")
            .trim();
          messageElement.innerText = apiResponseText;

          chatHistory.push({
            role: "model",
            parts: [{ text: apiResponseText }],
          });
        } catch (error) {
          console.log(error);
          messageElement.innerText = error.message;
          messageElement.style.color = "#ff0000";
        } finally {
          userData.file = {
            data: null,
            mime_type: null,
          };
          incomingMsgDiv.classList.remove("thinking");
          chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });
        }
      };

      const handleOutgoingMsg = (e) => {
        e.preventDefault();
        const userMessage = messageInput.value.trim();
        userData.message = userMessage;
        messageInput.value = "";

        const userMessageContent = `<div class="message-text">${userMessage}</div>
                                ${
                                  userData.file.data
                                    ? `<img src="data:${userData.file.mime_type};base64,${userData.file.data}" class="attachments"/>`
                                    : ""
                                }`;
        const outgoingMsgDiv = createMessageElement(
          userMessageContent,
          "user-message"
        );
        chatBody.appendChild(outgoingMsgDiv);
        chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: "smooth" });

        setTimeout(() => {
          const messageContent = `<i class="box-avatar fa-solid fa-robot"></i>
          <div class="message-text">
            <div class="thinking-indicator">
              <div class="dot"></div>
              <div class="dot"></div>
              <div class="dot"></div>
            </div>
          </div>`;

          const incomingMsgDiv = createMessageElement(
            messageContent,
            "bot-message",
            "thinking"
          );
          chatBody.appendChild(incomingMsgDiv);
          generateBotResponse(incomingMsgDiv);
        }, 600);
      };

      messageInput.addEventListener("keypress", (e) => {
        const userMessage = e.target.value.trim();
        if (e.key === "Enter" && userMessage) {
          handleOutgoingMsg(e);
        }
      });

      fileInput.addEventListener("change", () => {
        const file = fileInput.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
          fileUploadWrapper.querySelector("img").src = e.target.result;
          fileUploadWrapper.classList.add("file-uploaded");
          const base64String = e.target.result.split(",")[1];

          userData.file = {
            data: base64String,
            mime_type: file.type,
          };
          fileInput.value = "";
        };
        reader.readAsDataURL(file);
      });

      const picker = new EmojiMart.Picker({
        theme: "light",
        skinTonePosition: "none",
        previewPosition: "none",
      });

      document.querySelector(".chat-form").appendChild(picker);

      document.addEventListener("click", (e) => {
        if (e.target.closest(".emoji-mart")) return;
        if (e.target.id === "emoji-picker") {
          document.body.classList.toggle("show-emoji-picker");
        } else {
          document.body.classList.remove("show-emoji-picker");
        }
      });
      sendMessageButton.addEventListener("click", (e) => handleOutgoingMsg(e));

      document
        .querySelector("#file_upload")
        .addEventListener("click", () => fileInput.click());

      chatbotToggler.addEventListener("click", () => {
        console.log("clicked!!");
        document.body.classList.toggle("show-chatbot");
      });

      closeChatbot.addEventListener("click", () => {
        document.body.classList.remove("show-chatbot");
      });
    </script>
  </body>
</html>
